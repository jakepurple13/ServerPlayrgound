buildscript {

    ext.appengine_version = '1.9.60'
    ext.appengine_plugin_version = '1.3.4'

    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.cloud.tools:appengine-gradle-plugin:$appengine_plugin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'com.google.cloud.tools.appengine'

group 'com.example'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

dependencies {
    providedCompile "com.google.appengine:appengine:$appengine_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-html-builder:$ktor_version"
    compile "org.jetbrains:kotlin-css-jvm:1.0.0-pre.31-kotlin-1.2.41"
    compile "io.ktor:ktor-auth:$ktor_version"
    compile "io.ktor:ktor-auth-jwt:$ktor_version"
    compile "io.ktor:ktor-jackson:$ktor_version"
    testCompile "io.ktor:ktor-server-tests:$ktor_version"
    compile "org.jsoup:jsoup:1.12.1"
    compile "com.google.code.gson:gson:2.8.5"
    compile "com.squareup.okhttp3:okhttp:4.1.0"
    implementation "io.ktor:ktor-freemarker:$ktor_version"
    compile 'org.jetbrains.exposed:exposed:0.17.3'
    compile "org.xerial:sqlite-jdbc:3.21.0.1"
    compile "com.h2database:h2:1.4.197"
    implementation "io.ktor:ktor-websockets:$ktor_version"
    compile "org.postgresql:postgresql:42.2.2"
}

//task run(dependsOn: appengineRun)

//task stage(dependsOn: ['build', 'clean'])
//build.mustRunAfter clean
task stage {
    dependsOn installDist
}
